// Code generated by go-enum
// DO NOT EDIT!

package amg8833

import (
	"fmt"
	"strings"
)

const (
	// PowerNormal is a PowerMode of type Normal
	PowerNormal PowerMode = iota
	// PowerSleep is a PowerMode of type Sleep
	PowerSleep PowerMode = iota + 15
	// PowerStandby60s is a PowerMode of type Standby60s
	PowerStandby60s PowerMode = iota + 30
	// PowerStandby10s is a PowerMode of type Standby10s
	PowerStandby10s
)

const _PowerModeName = "NormalSleepStandby60sStandby10s"

var _PowerModeNames = []string{
	_PowerModeName[0:6],
	_PowerModeName[6:11],
	_PowerModeName[11:21],
	_PowerModeName[21:31],
}

// PowerModeNames returns a list of possible string values of PowerMode.
func PowerModeNames() []string {
	tmp := make([]string, len(_PowerModeNames))
	copy(tmp, _PowerModeNames)
	return tmp
}

var _PowerModeMap = map[PowerMode]string{
	0:  _PowerModeName[0:6],
	16: _PowerModeName[6:11],
	32: _PowerModeName[11:21],
	33: _PowerModeName[21:31],
}

// String implements the Stringer interface.
func (x PowerMode) String() string {
	if str, ok := _PowerModeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PowerMode(%d)", x)
}

var _PowerModeValue = map[string]PowerMode{
	_PowerModeName[0:6]:   0,
	_PowerModeName[6:11]:  16,
	_PowerModeName[11:21]: 32,
	_PowerModeName[21:31]: 33,
}

// ParsePowerMode attempts to convert a string to a PowerMode
func ParsePowerMode(name string) (PowerMode, error) {
	if x, ok := _PowerModeValue[name]; ok {
		return x, nil
	}
	return PowerMode(0), fmt.Errorf("%s is not a valid PowerMode, try [%s]", name, strings.Join(_PowerModeNames, ", "))
}
