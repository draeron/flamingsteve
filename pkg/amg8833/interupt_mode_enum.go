// Code generated by go-enum
// DO NOT EDIT!

package amg8833

import (
	"fmt"
	"strings"
)

const (
	// InterruptDisabled is a InterruptMode of type Disabled
	InterruptDisabled InterruptMode = iota
	// InterruptActive is a InterruptMode of type Active
	InterruptActive
	// InterruptAbsoluteValue is a InterruptMode of type AbsoluteValue
	InterruptAbsoluteValue
)

const _InterruptModeName = "DisabledActiveAbsoluteValue"

var _InterruptModeNames = []string{
	_InterruptModeName[0:8],
	_InterruptModeName[8:14],
	_InterruptModeName[14:27],
}

// InterruptModeNames returns a list of possible string values of InterruptMode.
func InterruptModeNames() []string {
	tmp := make([]string, len(_InterruptModeNames))
	copy(tmp, _InterruptModeNames)
	return tmp
}

var _InterruptModeMap = map[InterruptMode]string{
	0: _InterruptModeName[0:8],
	1: _InterruptModeName[8:14],
	2: _InterruptModeName[14:27],
}

// String implements the Stringer interface.
func (x InterruptMode) String() string {
	if str, ok := _InterruptModeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("InterruptMode(%d)", x)
}

var _InterruptModeValue = map[string]InterruptMode{
	_InterruptModeName[0:8]:   0,
	_InterruptModeName[8:14]:  1,
	_InterruptModeName[14:27]: 2,
}

// ParseInterruptMode attempts to convert a string to a InterruptMode
func ParseInterruptMode(name string) (InterruptMode, error) {
	if x, ok := _InterruptModeValue[name]; ok {
		return x, nil
	}
	return InterruptMode(0), fmt.Errorf("%s is not a valid InterruptMode, try [%s]", name, strings.Join(_InterruptModeNames, ", "))
}
